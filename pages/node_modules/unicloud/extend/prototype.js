/**
 *
 * JS扩展：
 *
 */
import base64 from './base64.js';
import Md5 from './md5.js';
import utf from './utf8.js';
String.prototype.utf8_encode = function () {
    return utf.encode(this);
};
String.prototype.utf8_decode = function () {
    return utf.decode(this);
};
String.prototype.base64_encode = function () {
    if (typeof btoa === 'function') return btoa(this.utf8_encode());
    return base64.encode(this);
};
String.prototype.base64_decode = function () {
    if (typeof atob === 'function') return atob(this).utf8_decode();
    return base64.decode(this);
};

//字符串Md5
String.prototype.md5 = function () {
    return new Md5().md5(this);
};

//let strRe = '这个{sex}人今年{age}岁'.re({sex: '女', age: 25});
String.prototype.re = function (val) {
    return this.replace(/\{(\w+?)\}/gi, function ($0, $1) {
        if (val[$1] === undefined) return $0;
        return val[$1];
    });
};

//改写String.prototype.trim
String.prototype.trim = function (s) {
    if (!s) s = '040'; // \040 或 \x20
    let re = new RegExp(`^([\\s|\\${s}]*)(.+?)([\\s|\\${s}]*)$`, 'gi');
    return this.replace(re, function ($0, $1, $2, $3) {
        // console.log(`${$0}/${$1}/${$2}/${$3}`)
        return $2;
    });
};

/**
 * 仅支持%d%s%f三种占位符
 * console.log('i am %s,is %s'.sprintf('CNE', 'Support'))
 */
String.prototype.sprintf = function (...arg) {
    let i = 0;
    return this.replace(/%([dfs])/gi, function (...$arg) {
        // console.log($arg)
        let a = $arg[1] === 's' ? '' : '0';
        return arg[i++] || a;
    });
};

//是否全中文，n为最大长度，或不限
String.prototype.is_cn = function (n) {
    n = n || '';
    let re = new RegExp(`^([\u4e00-\u9fa5]{1,${n}})$`, 'u');
    return re.test(this);
};

//是否全英文字母，n为最大长度，或不限
String.prototype.is_en = function (n) {
    n = n || '';
    let re = new RegExp(`^([a-z]{1,${n}})$`, 'i');
    return re.test(this);
};

//是否全数字
String.prototype.is_numeric = function (n) {
    n = n || '';
    let re = new RegExp(`^([0-9]{1,${n}})$`, 'i');
    return re.test(this);
};

//是否全英文字母+数字
String.prototype.is_alphanumeric = function (n) {
    n = n || '';
    let re = new RegExp(`^([a-z0-9]{1,${n}})$`, 'i');
    return re.test(this);
};

//是否手机号码
String.prototype.is_mob = function () {
    return /^([1][3456789]\d{9})$/.test(this);
};

//是否邮箱
String.prototype.is_mail = function () {
    return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(this);
};

//是否URL
String.prototype.is_url = function () {
    return /^https?:\/\/([a-z0-9][a-z0-9-]{0,62}\.)+[a-z]{2,10}\/.*$/.test(this);
};

//随机字符串
String.prototype.rand = function (len, hex) {
    len = len || 32;
    // let $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';//去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1*
    let $chars = hex ? 'abcdef0123456789' : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    if (this !== '') $chars = this;
    let maxPos = $chars.length;
    let pwd = '';
    for (let i = 0; i < len; i++) {
        pwd += $chars.charAt(Math.floor(Math.random() * maxPos));
    }
    return pwd;
};

//随机数字
Number.prototype.rand = function (min, max) {
    min = min || 0;
    max = max || 9007199254740990;
    if (this > 0) max = this;
    return Math.round(min + Math.random() * (max - min));
};

//数组随机选一个
Array.prototype.rand = function () {
    let n = (0).rand(0, this.length - 1);
    return this[n];
};

//数组中是否含有value
Array.prototype.has = function (value) {
    return this.some((val) => {
        return String(val) === String(value);
    });
};
Array.prototype.sum = function () {
    let i = 0;
    this.map((n) => {
        i += n * 1;
    });
    return i;
};

//删除指定下标元素
Array.prototype.unset = function (index) {
    return this.filter((k, i) => i !== index);
};

//删除指定值
//对于Object，只能用：obj.filter(tab => tab.name !== key);
Array.prototype.del = function (key) {
    return this.filter((k) => k !== key);
};
Array.prototype.min = function () {
    return Math.min(
        ...this.map((n) => {
            return Number(n) || 0;
        })
    );
};
Array.prototype.max = function (v) {
    return Math.max(
        ...this.map((n) => {
            return Number(n) || 0;
        })
    );
};

/**
 * 拆分用于位运算的等比数列值，求和用 .sum()
 * 例：7=1+2+4；10=2+8
 * 1|2|4=7
 * 返回和tp相同的数据类型，限：整型，或将整型改为字串型
 */
Number.prototype.split = function (tp) {
    let n = this;
    let a = typeof tp === 'number' ? 0 : '';
    let i = 1,
        val = [];
    while (n > 0) {
        if (i & n) val.push(i + a), (n -= i);
        i *= 2;
    }
    return val;
};

//数字是否存在于数组值中，判断数组是否有某个下标值，直接用：if(key in array)
Number.prototype.in_array = function (value) {
    return value.some((val) => {
        return Number(val) === Number(this);
    });
};

//文本是否存在于数组值中
String.prototype.in_array = function (value) {
    return value.some((val) => {
        return String(val) === String(this);
    });
};

/**
 * 日期格式化
 * console.log((new Date).format('YYYY-MM-DD HH:ii:ss'))
 * 若取一个Date的时间戳用：date.valueOf()，但这是带毫秒的
 */
Date.prototype.format = function (fmt) {
    let tm = {
        Y: this.getFullYear(),
        //年份
        y: this.getFullYear(),
        //年份
        M: this.getMonth() + 1,
        //月份
        m: this.getMonth() + 1,
        //月份
        D: this.getDate(),
        //日
        d: this.getDate(),
        //日
        H: this.getHours(),
        //小时
        h: this.getHours(),
        //小时
        i: this.getMinutes(),
        //分
        s: this.getSeconds(),
        //秒
        w: this.getDay(),
        //星期
        W: this.getDay(),
        //星期，中文
        q: Math.floor((this.getMonth() + 3) * 0.3333),
        //季度
        S: this.getMilliseconds() //毫秒
    };

    fmt = fmt || 'yyyy-mm-dd hh:ii:ss';
    let week = ['日', '一', '二', '三', '四', '五', '六'];
    for (let k in tm) {
        if (new RegExp(`(${k}+)`).test(fmt)) {
            let v = k === 'W' ? week[tm[k]] : ('0' + tm[k]).substr(0 - RegExp.$1.length);
            fmt = fmt.replace(RegExp.$1, v);
        }
    }
    return fmt;
};

//时间戳转换为可读时间格式
Number.prototype.date = function (fmt) {
    return new Date(this * 1000).format(fmt);
};

//去除<*>,冒号和空格
String.prototype.text = function () {
    return this.replace(/(\<.*?\>)|[\:\：\*]|(\s*?)/gi, '');
};
String.prototype.ucfirst = function () {
    if (!this) return '';
    return this[0].toUpperCase() + this.substr(1).toLowerCase();
};

//rgb(123, 20, 30)转换为#7B141E格式
String.prototype.rgbHex = function () {
    let [r, g, b] = this.match(/\d+/g);
    return '#' + ((1 << 24) + ((r * 1) << 16) + ((g * 1) << 8) + b * 1).toString(16).slice(1).toUpperCase();
};

/**
 * 将金额转换为大写
 * @returns {string}
 */
Number.prototype.rmb = function () {
    let number = this;
    const fraction = ['角', '分'];
    const digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];
    const unit = [
        ['元', '万', '亿'],
        ['', '拾', '佰', '仟']
    ];
    let head = number < 0 ? '-' : '';
    number = Math.abs(number);
    let s = '';
    for (let i = 0; i < fraction.length; i++) {
        s += (digit[Math.floor(number * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, '');
    }
    s = s || '整';
    number = Math.floor(number);
    for (let v = 0; v < unit[0].length && number > 0; v++) {
        let p = '';
        for (let j = 0; j < unit[1].length && number > 0; j++) {
            p = digit[number % 10] + unit[1][j] + p;
            number = Math.floor(number / 10);
        }
        s = p.replace(/(零.)*零$/, '').replace(/^$/, '零') + unit[0][v] + s;
    }
    return (
        head +
        s
            .replace(/(零.)*零元/, '元')
            .replace(/(零.)+/g, '零')
            .replace(/^整$/, '零元整')
    );
};

/*
 货币格式化-￥2,342.00，
 decimal     小数位数，默认2位
 thousands   带千分位,默认不带，
 */
Number.prototype.format = function (decimal, thousands) {
    if (decimal === undefined) decimal = 2;
    return thousands
        ? this.toLocaleString({
              minimumFractionDigits: decimal,
              maximumFractionDigits: decimal
          })
        : this.toFixed(decimal);
};
String.prototype.format = function (decimal, thousands) {
    return Number(this).format(decimal, thousands);
};
